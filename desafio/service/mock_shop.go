// Code generated by MockGen. DO NOT EDIT.
// Source: shop.go

// Package service is a generated GoMock package.
package service

import (
	domain "app/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShopRepository is a mock of ShopRepository interface.
type MockShopRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShopRepositoryMockRecorder
}

// MockShopRepositoryMockRecorder is the mock recorder for MockShopRepository.
type MockShopRepositoryMockRecorder struct {
	mock *MockShopRepository
}

// NewMockShopRepository creates a new mock instance.
func NewMockShopRepository(ctrl *gomock.Controller) *MockShopRepository {
	mock := &MockShopRepository{ctrl: ctrl}
	mock.recorder = &MockShopRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopRepository) EXPECT() *MockShopRepositoryMockRecorder {
	return m.recorder
}

// CreateShop mocks base method.
func (m *MockShopRepository) CreateShop(arg0 context.Context, arg1 domain.Shop) (domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShop", arg0, arg1)
	ret0, _ := ret[0].(domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShop indicates an expected call of CreateShop.
func (mr *MockShopRepositoryMockRecorder) CreateShop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShop", reflect.TypeOf((*MockShopRepository)(nil).CreateShop), arg0, arg1)
}

// Delete mocks base method.
func (m *MockShopRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShopRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShopRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockShopRepository) GetAll(arg0 context.Context, arg1 domain.Shop) ([]domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockShopRepositoryMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockShopRepository)(nil).GetAll), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockShopRepository) GetByID(arg0 context.Context, arg1 string, arg2 domain.Shop) (domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockShopRepositoryMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockShopRepository)(nil).GetByID), arg0, arg1, arg2)
}

// GetByName mocks base method.
func (m *MockShopRepository) GetByName(arg0 context.Context, arg1 string, arg2 domain.Shop) (domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockShopRepositoryMockRecorder) GetByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockShopRepository)(nil).GetByName), arg0, arg1, arg2)
}

// GetByPrice mocks base method.
func (m *MockShopRepository) GetByPrice(arg0 context.Context, arg1 float64, arg2 domain.Shop) ([]domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPrice", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPrice indicates an expected call of GetByPrice.
func (mr *MockShopRepositoryMockRecorder) GetByPrice(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPrice", reflect.TypeOf((*MockShopRepository)(nil).GetByPrice), arg0, arg1, arg2)
}

// GetByScore mocks base method.
func (m *MockShopRepository) GetByScore(arg0 context.Context, arg1 float64, arg2 domain.Shop) ([]domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByScore", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByScore indicates an expected call of GetByScore.
func (mr *MockShopRepositoryMockRecorder) GetByScore(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScore", reflect.TypeOf((*MockShopRepository)(nil).GetByScore), arg0, arg1, arg2)
}

// ListScores mocks base method.
func (m *MockShopRepository) ListScores(arg0 context.Context, arg1 domain.Shop) (map[string]float64, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListScores", arg0, arg1)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// ListScores indicates an expected call of ListScores.
func (mr *MockShopRepositoryMockRecorder) ListScores(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScores", reflect.TypeOf((*MockShopRepository)(nil).ListScores), arg0, arg1)
}

// Update mocks base method.
func (m *MockShopRepository) Update(arg0 context.Context, arg1 string, arg2 domain.Shop) (domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockShopRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShopRepository)(nil).Update), arg0, arg1, arg2)
}

// UpdatePrice mocks base method.
func (m *MockShopRepository) UpdatePrice(arg0 context.Context, arg1 string, arg2 float64, arg3 domain.Shop) (domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrice", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrice indicates an expected call of UpdatePrice.
func (mr *MockShopRepositoryMockRecorder) UpdatePrice(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrice", reflect.TypeOf((*MockShopRepository)(nil).UpdatePrice), arg0, arg1, arg2, arg3)
}

// UpdateScore mocks base method.
func (m *MockShopRepository) UpdateScore(arg0 context.Context, arg1 string, arg2 float64, arg3 domain.Shop) (domain.Shop, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScore", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(domain.Shop)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateScore indicates an expected call of UpdateScore.
func (mr *MockShopRepositoryMockRecorder) UpdateScore(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScore", reflect.TypeOf((*MockShopRepository)(nil).UpdateScore), arg0, arg1, arg2, arg3)
}
